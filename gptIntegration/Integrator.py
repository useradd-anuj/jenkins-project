import openai
from jenkinsapi.jenkins import Jenkins
import pyttsx3
import speech_recognition as s
import subprocess

openai.api_key_path="key.txt"
def GPT(request):
    """
    request is sent to openai's gpt3.5 turbo model to code completion. Note:- Code-davinci-002 is deprecated.
    """
    if 'webpage' in request or 'website' in request or "web page" in request:
        #Change model name as per your requirement
        output=openai.ChatCompletion.create(
            model="gpt-3.5-turbo", 
            messages=[{"role": "user", "content": request}
                ] 
            )
        print(output)
        deploy(output["choices"][0]["message"]["content"])
    else:
        print("The software is under development. Stay tuned for the newer version")
        pyttsx3.speak("The software is under development. Stay tuned for the newer version")
        
def deploy(code):
    """
    The code is generated by AI which is deployed by Jenkins by setting up webserver in a single freestyle job.
    I am testing a full fledge pipeline from Devlopment to building env to testing and deplying to prod. 
    After everything gets successfull I will recommit the code.
    """
    pyttsx3.speak("Jenkins job created and initiated")
    print("deploying the webpage on the webserver")
    f = open('index.txt',"w")
    f.write(code)
    f.close()
    #Add Git to path or else instead of git specficy the whole path to git
    print(subprocess.getoutput('git add  ..\\gptIntegration\\index.txt'))# change as per your folder schema
    subprocess.getoutput('git commit -m final')
    subprocess.getoutput('git push')#do have authentication already done with github
    server=Jenkins("http://192.168.43.180:8089",username="admin",password="98d6d48a187e47919ab26c4e52e17537")
    f=open("config.xml","r")
    content=f.read()
    f.close()
    server.delete_job("createdbyAPI")
    server.create_job("createdbyAPI",content)
    server.build_job("createdbyAPI")#remove if you can wait for a min before build starts
    
    
# Audio to text and sending to openai    
with s.Microphone() as source: 
    pyttsx3.speak("You may speak")
    print("speak up")
    r=s.Recognizer().listen(source)
    print("done")
    pyttsx3.speak("Microphone session closed")
    out=s.Recognizer().recognize_google(r)
    print(out)
    print("sending")
    pyttsx3.speak("sending the request to the model")
    GPT(out)
